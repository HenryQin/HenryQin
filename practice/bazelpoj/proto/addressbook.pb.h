// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/addressbook.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2faddressbook_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2faddressbook_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2faddressbook_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2faddressbook_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2faddressbook_2eproto;
namespace addressbook {
class MyAddress;
class MyAddressDefaultTypeInternal;
extern MyAddressDefaultTypeInternal _MyAddress_default_instance_;
}  // namespace addressbook
PROTOBUF_NAMESPACE_OPEN
template<> ::addressbook::MyAddress* Arena::CreateMaybeMessage<::addressbook::MyAddress>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace addressbook {

// ===================================================================

class MyAddress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:addressbook.MyAddress) */ {
 public:
  MyAddress();
  virtual ~MyAddress();

  MyAddress(const MyAddress& from);
  MyAddress(MyAddress&& from) noexcept
    : MyAddress() {
    *this = ::std::move(from);
  }

  inline MyAddress& operator=(const MyAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyAddress& operator=(MyAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyAddress* internal_default_instance() {
    return reinterpret_cast<const MyAddress*>(
               &_MyAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MyAddress& a, MyAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(MyAddress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyAddress* New() const final {
    return CreateMaybeMessage<MyAddress>(nullptr);
  }

  MyAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyAddress& from);
  void MergeFrom(const MyAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "addressbook.MyAddress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2faddressbook_2eproto);
    return ::descriptor_table_proto_2faddressbook_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCityFieldNumber = 1,
    kAreaFieldNumber = 2,
    kAddressFieldNumber = 3,
  };
  // optional string city = 1;
  bool has_city() const;
  private:
  bool _internal_has_city() const;
  public:
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // optional string area = 2;
  bool has_area() const;
  private:
  bool _internal_has_area() const;
  public:
  void clear_area();
  const std::string& area() const;
  void set_area(const std::string& value);
  void set_area(std::string&& value);
  void set_area(const char* value);
  void set_area(const char* value, size_t size);
  std::string* mutable_area();
  std::string* release_area();
  void set_allocated_area(std::string* area);
  private:
  const std::string& _internal_area() const;
  void _internal_set_area(const std::string& value);
  std::string* _internal_mutable_area();
  public:

  // optional string address = 3;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:addressbook.MyAddress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr area_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  friend struct ::TableStruct_proto_2faddressbook_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MyAddress

// optional string city = 1;
inline bool MyAddress::_internal_has_city() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MyAddress::has_city() const {
  return _internal_has_city();
}
inline void MyAddress::clear_city() {
  city_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MyAddress::city() const {
  // @@protoc_insertion_point(field_get:addressbook.MyAddress.city)
  return _internal_city();
}
inline void MyAddress::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:addressbook.MyAddress.city)
}
inline std::string* MyAddress::mutable_city() {
  // @@protoc_insertion_point(field_mutable:addressbook.MyAddress.city)
  return _internal_mutable_city();
}
inline const std::string& MyAddress::_internal_city() const {
  return city_.GetNoArena();
}
inline void MyAddress::_internal_set_city(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MyAddress::set_city(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  city_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:addressbook.MyAddress.city)
}
inline void MyAddress::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:addressbook.MyAddress.city)
}
inline void MyAddress::set_city(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  city_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:addressbook.MyAddress.city)
}
inline std::string* MyAddress::_internal_mutable_city() {
  _has_bits_[0] |= 0x00000001u;
  return city_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MyAddress::release_city() {
  // @@protoc_insertion_point(field_release:addressbook.MyAddress.city)
  if (!_internal_has_city()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return city_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MyAddress::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  city_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city);
  // @@protoc_insertion_point(field_set_allocated:addressbook.MyAddress.city)
}

// optional string area = 2;
inline bool MyAddress::_internal_has_area() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MyAddress::has_area() const {
  return _internal_has_area();
}
inline void MyAddress::clear_area() {
  area_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MyAddress::area() const {
  // @@protoc_insertion_point(field_get:addressbook.MyAddress.area)
  return _internal_area();
}
inline void MyAddress::set_area(const std::string& value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:addressbook.MyAddress.area)
}
inline std::string* MyAddress::mutable_area() {
  // @@protoc_insertion_point(field_mutable:addressbook.MyAddress.area)
  return _internal_mutable_area();
}
inline const std::string& MyAddress::_internal_area() const {
  return area_.GetNoArena();
}
inline void MyAddress::_internal_set_area(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  area_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MyAddress::set_area(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  area_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:addressbook.MyAddress.area)
}
inline void MyAddress::set_area(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  area_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:addressbook.MyAddress.area)
}
inline void MyAddress::set_area(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  area_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:addressbook.MyAddress.area)
}
inline std::string* MyAddress::_internal_mutable_area() {
  _has_bits_[0] |= 0x00000002u;
  return area_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MyAddress::release_area() {
  // @@protoc_insertion_point(field_release:addressbook.MyAddress.area)
  if (!_internal_has_area()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return area_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MyAddress::set_allocated_area(std::string* area) {
  if (area != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  area_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), area);
  // @@protoc_insertion_point(field_set_allocated:addressbook.MyAddress.area)
}

// optional string address = 3;
inline bool MyAddress::_internal_has_address() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MyAddress::has_address() const {
  return _internal_has_address();
}
inline void MyAddress::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& MyAddress::address() const {
  // @@protoc_insertion_point(field_get:addressbook.MyAddress.address)
  return _internal_address();
}
inline void MyAddress::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:addressbook.MyAddress.address)
}
inline std::string* MyAddress::mutable_address() {
  // @@protoc_insertion_point(field_mutable:addressbook.MyAddress.address)
  return _internal_mutable_address();
}
inline const std::string& MyAddress::_internal_address() const {
  return address_.GetNoArena();
}
inline void MyAddress::_internal_set_address(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MyAddress::set_address(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:addressbook.MyAddress.address)
}
inline void MyAddress::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:addressbook.MyAddress.address)
}
inline void MyAddress::set_address(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:addressbook.MyAddress.address)
}
inline std::string* MyAddress::_internal_mutable_address() {
  _has_bits_[0] |= 0x00000004u;
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MyAddress::release_address() {
  // @@protoc_insertion_point(field_release:addressbook.MyAddress.address)
  if (!_internal_has_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return address_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MyAddress::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:addressbook.MyAddress.address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace addressbook

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2faddressbook_2eproto
